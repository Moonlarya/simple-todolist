{"version":3,"sources":["components/TodoForm.js","components/Todo/Todo.js","TodoList.js","index.js"],"names":["TodoForm","state","task","handleChange","event","setState","target","value","onSubmit","preventDefault","props","addTodos","console","error","this","className","name","placeholder","onChange","type","Component","Todo","isEdit","onEdit","editTask","stopPropagation","toggleEdit","log","onDelete","deleteTask","complete","onClick","toggleComplete","defaultValue","TodoList","todos","JSON","parse","localStorage","getItem","saveTodos","setItem","stringify","todo","putElement","id","element","arr","index","splice","map","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAoCeA,E,4MAjCbC,MAAQ,CACNC,KAAM,I,EAERC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEH,KAAME,EAAME,OAAOC,S,EAErCC,SAAW,SAACJ,GACVA,EAAMK,iBACF,EAAKR,MAAMC,MACb,EAAKQ,MAAMC,SAAS,CAAET,KAAM,EAAKD,MAAMC,OACvC,EAAKG,SAAS,CAAEH,KAAM,MAEtBU,QAAQC,MAAM,wB,uDAGR,IACAX,EAASY,KAAKb,MAAdC,KACR,OACE,0BAAMM,SAAUM,KAAKN,SAAUO,UAAU,kBACvC,2BACEC,KAAK,OACLT,MAAOL,EACPe,YAAY,cACZC,SAAUJ,KAAKX,eAEjB,4BAAQY,UAAU,cAAcI,KAAK,UAArC,Y,GA1BeC,aCoERC,G,kNAlEbpB,MAAQ,CACNqB,QAAQ,EACRpB,KAAM,I,EAERqB,OAAS,SAACnB,GACJ,EAAKH,MAAMC,MACb,EAAKQ,MAAMc,SAAS,CAAEtB,KAAM,EAAKD,MAAMC,OACvCE,EAAMqB,kBACN,EAAKC,cAELd,QAAQC,MAAM,wB,EAGlBV,aAAe,SAACC,GACdQ,QAAQe,IAAIvB,EAAME,OAAOC,OACzB,EAAKF,SAAS,CAAEH,KAAME,EAAME,OAAOC,S,EAErCmB,WAAa,WACX,EAAKrB,SAAS,CAAEiB,QAAS,EAAKrB,MAAMqB,U,EAEtCM,SAAW,SAACxB,GACV,EAAKM,MAAMmB,aACXzB,EAAMqB,mB,uDAEE,IAAD,EACoBX,KAAKJ,MAAMH,MAA9BuB,EADD,EACCA,SAAU5B,EADX,EACWA,KACVoB,EAAWR,KAAKb,MAAhBqB,OACR,OACE,8BACIA,GACA,wBACES,QAASjB,KAAKJ,MAAMsB,eACpBjB,UAAS,mCAA8Be,EAAW,WAAa,KAE/D,0BAAMf,UAAS,UAAKe,EAAW,cAAgB,KAAO5B,GACtD,yBAAKa,UAAU,0BACb,4BAAQgB,QAASjB,KAAKY,WAAYX,UAAU,eAA5C,QAGA,4BAAQgB,QAASjB,KAAKc,SAAUb,UAAU,cAA1C,UAMLO,GACC,wBACES,QAASjB,KAAKJ,MAAMsB,eACpBjB,UAAS,mCAA8Be,EAAW,WAAa,KAE/D,2BAAOG,aAAc/B,EAAMgB,SAAUJ,KAAKX,eAC1C,yBAAKY,UAAU,0BACb,4BAAQgB,QAASjB,KAAKS,OAAQR,UAAU,eAAxC,QAGA,4BAAQgB,QAASjB,KAAKY,WAAYX,UAAU,eAA5C,iB,GAxDKK,cC2DJc,G,kNAxDbjC,MAAQ,CACNkC,MAAOC,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,I,EAEtDC,UAAY,WACVF,aAAaG,QAAQ,QAASL,KAAKM,UAAU,EAAKzC,MAAMkC,S,EAE1DxB,SAAW,SAACgC,GACV,IAAMzC,EAAI,2BAAQyC,GAAR,IAAcb,UAAU,IAClC,EAAKzB,SAAS,CAAE8B,MAAM,GAAD,mBAAM,EAAKlC,MAAMkC,OAAjB,CAAwBjC,KAAS,EAAKsC,Y,EAE7DI,WAAa,SAACC,EAAIC,GAChB,IAAMC,EAAG,YAAO,EAAK9C,MAAMkC,OAC3BY,EAAIF,GAAMC,EACV,EAAKzC,SAAS,CAAE8B,MAAOY,GAAO,EAAKP,Y,EAErCR,eAAiB,SAACa,GAKhB,IAAMC,EAAU,EAAK7C,MAAMkC,MAAMU,GACjCC,EAAQhB,UAAYgB,EAAQhB,SAC5B,EAAKc,WAAWC,EAAIC,I,EAEtBtB,SAAW,SAACtB,EAAM8C,GAChB,IAAMF,EAAU,EAAK7C,MAAMkC,MAAMa,GAC3BL,EAAI,2BAAQG,GAAY5C,GAC9B,EAAK0C,WAAWI,EAAOL,I,EAEzBd,WAAa,SAACgB,GACZ,IAAIE,EAAG,YAAO,EAAK9C,MAAMkC,OACzBY,EAAIE,OAAOJ,EAAI,GACf,EAAKxC,SAAS,CAAE8B,MAAOY,K,uDAEf,IAAD,OACCZ,EAAUrB,KAAKb,MAAfkC,MACR,OACE,yBAAKpB,UAAU,WACb,kBAAC,EAAD,CAAUJ,SAAUG,KAAKH,WACzB,wBAAII,UAAU,QACXoB,EAAMe,KAAI,SAACP,EAAMK,GAAP,OACT,kBAAC,EAAD,CACEG,IAAKH,EACLH,GAAIG,EACJhB,eAAgB,kBAAM,EAAKA,eAAegB,IAC1CnB,WAAY,kBAAM,EAAKA,WAAWmB,IAClCxB,SAAU,SAACtB,GAAD,OAAU,EAAKsB,SAAStB,EAAM8C,IACxCzC,MAAOoC,a,GAhDEvB,cCAvBgC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.eded0ef4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass TodoForm extends Component {\r\n  state = {\r\n    task: \"\",\r\n  };\r\n  handleChange = (event) => {\r\n    this.setState({ task: event.target.value });\r\n  };\r\n  onSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (this.state.task) {\r\n      this.props.addTodos({ task: this.state.task });\r\n      this.setState({ task: \"\" });\r\n    } else {\r\n      console.error(\"Your input is empty\");\r\n    }\r\n  };\r\n  render() {\r\n    const { task } = this.state;\r\n    return (\r\n      <form onSubmit={this.onSubmit} className=\"flex_container\">\r\n        <input\r\n          name=\"task\"\r\n          value={task}\r\n          placeholder=\"What to do?\"\r\n          onChange={this.handleChange}\r\n        />\r\n        <button className=\"primary_btn\" type=\"submit\">\r\n          Add\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { Component } from \"react\";\r\nimport \"./style.scss\";\r\n\r\nclass Todo extends Component {\r\n  state = {\r\n    isEdit: false,\r\n    task: \"\",\r\n  };\r\n  onEdit = (event) => {\r\n    if (this.state.task) {\r\n      this.props.editTask({ task: this.state.task });\r\n      event.stopPropagation();\r\n      this.toggleEdit();\r\n    } else {\r\n      console.error(\"Your input is empty\");\r\n    }\r\n  };\r\n  handleChange = (event) => {\r\n    console.log(event.target.value);\r\n    this.setState({ task: event.target.value });\r\n  };\r\n  toggleEdit = () => {\r\n    this.setState({ isEdit: !this.state.isEdit });\r\n  };\r\n  onDelete = (event) => {\r\n    this.props.deleteTask();\r\n    event.stopPropagation();\r\n  };\r\n  render() {\r\n    const { complete, task } = this.props.value;\r\n    const { isEdit } = this.state;\r\n    return (\r\n      <div>\r\n        {!isEdit && (\r\n          <li\r\n            onClick={this.props.toggleComplete}\r\n            className={`flex_container todo text ${complete ? \"complete\" : \"\"}`}\r\n          >\r\n            <span className={`${complete ? \"text-stroke\" : \"\"}`}>{task}</span>\r\n            <div className=\"flex_container control\">\r\n              <button onClick={this.toggleEdit} className=\"primary_btn\">\r\n                Edit\r\n              </button>\r\n              <button onClick={this.onDelete} className=\"delete_btn\">\r\n                ×\r\n              </button>\r\n            </div>\r\n          </li>\r\n        )}\r\n        {isEdit && (\r\n          <li\r\n            onClick={this.props.toggleComplete}\r\n            className={`flex_container todo text ${complete ? \"complete\" : \"\"}`}\r\n          >\r\n            <input defaultValue={task} onChange={this.handleChange} />\r\n            <div className=\"flex_container control\">\r\n              <button onClick={this.onEdit} className=\"primary_btn\">\r\n                Save\r\n              </button>\r\n              <button onClick={this.toggleEdit} className=\"primary_btn\">\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          </li>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React, { Component } from \"react\";\nimport TodoForm from \"./components/TodoForm\";\nimport Todo from \"./components/Todo/Todo\";\nimport \"./style/style.css\";\n\nclass TodoList extends Component {\n  state = {\n    todos: JSON.parse(localStorage.getItem(\"todos\")) || [],\n  };\n  saveTodos = () => {\n    localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\n  };\n  addTodos = (todo) => {\n    const task = { ...todo, complete: false };\n    this.setState({ todos: [...this.state.todos, task] }, this.saveTodos);\n  };\n  putElement = (id, element) => {\n    const arr = [...this.state.todos];\n    arr[id] = element;\n    this.setState({ todos: arr }, this.saveTodos);\n  };\n  toggleComplete = (id) => {\n    /*1) Дістати потрібний елемент за індексом\n      2) Зробити в цьому елементі необхідні зміни\n      3) Вставити цей елмент назад в масив на те саме місце  (по існуючому індексу)\n      4) вставити масив в стейт */\n    const element = this.state.todos[id];\n    element.complete = !element.complete;\n    this.putElement(id, element);\n  };\n  editTask = (task, index) => {\n    const element = this.state.todos[index];\n    const todo = { ...element, ...task };\n    this.putElement(index, todo);\n  };\n  deleteTask = (id) => {\n    let arr = [...this.state.todos];\n    arr.splice(id, 1);\n    this.setState({ todos: arr });\n  };\n  render() {\n    const { todos } = this.state;\n    return (\n      <div className=\"wrapper\">\n        <TodoForm addTodos={this.addTodos} />\n        <ul className=\"todo\">\n          {todos.map((todo, index) => (\n            <Todo\n              key={index}\n              id={index}\n              toggleComplete={() => this.toggleComplete(index)}\n              deleteTask={() => this.deleteTask(index)}\n              editTask={(task) => this.editTask(task, index)}\n              value={todo}\n            />\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./TodoList\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}